"" Source your .vimrc
"source ~/.vimrc

set NERDTree
set ReplaceWithRegister     " gr, grr
set argtextobj              " aa, ia
set commentary              " gcc, gc + motion, v_gc
set highlightedyank
set ideajoin
set ideamarks
set ideastatusicon=gray
set surround                " ys, cs, ds, S
set textobj-entire          " ae, ie

set visualbell
set noerrorbells


set autoindent
set clipboard+=ideaput
set clipboard+=unnamedplus
set ignorecase
set incsearch
set number relativenumber
set scrolloff=8
set showcmd
set showmode
set smartindent
set smarttab
set which-key
set notimeout

" better mapping for search
nnoremap / :action Find<CR>
nnoremap <C-n> :action FindNext<CR>
nnoremap <C-p> :action FindPrevious<CR>


let g:WhichKey_FontSize = 15
let g:WhichKey_CommandColor = "#8caaee"
let g:WhichKey_PrefixColor = "#ca9ee6"
let g:WhichKey_KeyColor = "#c6d0f5"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_FontFamily = "JetBrains Mono Medium"
let g:WhichKey_Divider = " "
let g:WhichKey_ShowVimActions = "true"

" Open ideavimrc
map <leader>; :vsplit ~/.ideavimrc<CR>
let g:WhichKeyDesc_leader_vimrc = "<leader>; open ideavimrc"

let g:WhichKeyDesc_replace = "gr replace with register"
let g:WhichKeyDesc_comment = "gcc comment line"
let g:WhichKeyDesc_comment = "gc"

" use space as leader
map <Space> <leader>

" use jj for escape
inoremap jj <Esc>

"disable key movement in normal, visual, select, and operator-pending modes
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

"move lines up and down and adjust indent
nnoremap <A-k> :m .-2<CR>==
nnoremap <A-j> :m .+1<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

"delete single character without copying into register
nnoremap x "_x

"remap Y to map from current position to the end of line
"This mapping sets up Y to be consistent with the C and D operators, which act from the cursor to the end of the line
nnoremap Y y$
" copy method or json object
nnoremap YY va{Vy}

" window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

"map <C-n> <Action>(PopupMenu-selectnext)
"map <C-p> <Action>(PopupMenu-selectprev)
"map <A-n> <Action>(Tree-selectNext)
"map <A-p> <Action>(Tree-selectPrevious)
"inoremap <A-n> <Action>(PopupMenu-selectNext)
"inoremap <A-p> <Action>(PopupMenu-selectPrev)

" current open file: settings > behavior > Always select opened file
map <leader>e :NERDTreeToggle<CR>
let g:WhichKeyDesc_leader_explorer = "<leader>e open Project Explorer"


map <leader><space> <Action>(Switcher)
map <leader>q <Action>(CloseContent)

"use buffer terminology from vim instead of tabs
map ]b <Action>(NextTab)
map [b <Action>(PreviousTab)

" Debug (d)
" TODO add
map <leader>dt <Action>(ToggleLineBreakpoint) 
" step back
" continue
" disconnect
" watch
" expression
" step into
" step out
" quit
" start
" toggle UI
let g:WhichKeyDesc_leader_debug = "<leader>d +Debug"
let g:WhichKeyDesc_debug_breakpoint = "<leader>dt toggle Breakpoint"


" Test (t) 
map gt <Action>(GotoTest)
map <leader>tr <Action>(RunClass)
map <leader>td <Action>(DebugClass)
map <leader>tc <Action>(RunCoverage)
map <leader>tf <Action>(RerunFailedTests)
map <leader>ta <Action>(RunTestGroup)
map <leader>tt <Action>(TestTreePopupMenu)
let g:WhichKeyDesc_leader_test = "<leader>t +Test"
let g:WhichKeyDesc_test_run = "<leader>tr run nearest test"
let g:WhichKeyDesc_test_debug = "<leader>td debug nearest test"
let g:WhichKeyDesc_test_coverage = "<leader>tc run code coverage"
let g:WhichKeyDesc_test_failed = "<leader>tf rerun failed tests"
let g:WhichKeyDesc_test_all = "<leader>ta run all"
let g:WhichKeyDesc_test_popup = "<leader>tt show test menu"
let g:WhichKeyDesc_test_goto = "gt go to Test"

if has('ide')
  if &ide =~? 'Android Studio'
    " Android (a)
    map <leader>ar <Action>(Run)
    map <leader>as <Action>(Stop)
    map <leader>ag <Action>(Android.SyncProject)
    map <leader>ad <Action>(AndroidConnectDebuggerAction)
    map <leader>aa <Action>(com.developerphil.adbidea.action.AdbIdeaQuickList)
    map <leader>ae <Action>(Android.DeviceManager2)
    map <leader>ac <Action>(ChooseRunConfiguration)
    " select device
    " device explorer
    " configuration
    " studio bot
    let g:WhichKeyDesc_leader_android = "<leader>a +Android"
    let g:WhichKeyDesc_android_run = "<leader>ar run"
    let g:WhichKeyDesc_android_stop = "<leader>as stop"
    let g:WhichKeyDesc_android_gradleSync = "<leader>ag gradle sync"
    let g:WhichKeyDesc_android_debugger = "<leader>ad attach debugger"
    let g:WhichKeyDesc_android_adb = "<leader>aa ADB actions"
    let g:WhichKeyDesc_android_devices = "<leader>ae Device Explorer"
    let g:WhichKeyDesc_android_configuration = "<leader>ac run/debug configurations"
  endif
endif

" Split (s)
map <leader>sl <Action>(MoveTabRight)
map <leader>sh <Action>(MoveTabLeft)
map <leader>sj <Action>(MoveTabDown)
map <leader>sk <Action>(MoveTabUp)
map <leader>su <Action>(Unsplit)
let g:WhichKeyDesc_leader_split = "<leader>s +Split"
let g:WhichKeyDesc_split_right = "<leader>sl split and move right"
let g:WhichKeyDesc_split_left = "<leader>sh split and move left"
let g:WhichKeyDesc_split_down = "<leader>sj split and move down"
let g:WhichKeyDesc_split_up = "<leader>sk split and move up"
let g:WhichKeyDesc_split_unsplit = "<leader>su unsplit"

" Find (f)
map <leader>ff <Action>(GotoFile)
map <leader>fb <Action>(Switcher)
map <leader>fs <Action>(FindInPath)
map <leader>fu <Action>(FindUsages)
map <leader>fo <Action>(RecentFiles)
map <leader>fe <Action>(SearchEverywhere)
map <leader>fa <Action>(GotoAction)
map <leader>fl <Action>(RecentLocations)
map <leader>fm <Action>(ShowBookmarks)
let g:WhichKeyDesc_leader_finder = "<leader>f +Find"
let g:WhichKeyDesc_finder_file = "<leader>ff file (Name)"
let g:WhichKeyDesc_finder_buffer = "<leader>fb open buffer (tab)"
let g:WhichKeyDesc_finder_string = "<leader>fs string"
let g:WhichKeyDesc_finder_usage = "<leader>fu usage"
let g:WhichKeyDesc_finder_recent = "<leader>fo old files"
let g:WhichKeyDesc_finder_everywhere = "<leader>fe everywhere"
let g:WhichKeyDesc_finder_action = "<leader>fa action"
let g:WhichKeyDesc_finder_location = "<leader>fl recent location"
let g:WhichKeyDesc_finder_marks = "<leader>fm Marks"

" Views (v)
map <leader>vb <Action>(ActivateBuildToolWindow)
map <leader>vc <Action>(ActivateCommitToolWindow)
map <leader>vd <Action>(ActivateDebugToolWindow)
map <leader>ve <Action>(ActivateDeviceExplorerToolWindow)
map <leader>vg <Action>(ActivateVersionControlToolWindow)
map <leader>vl <Action>(ActivateLogcatToolWindow)
map <leader>vm <Action>(ActivateBookmarksToolWindow)
map <leader>vo <Action>(ActivateTODOToolWindow)
map <leader>vp <Action>(ActivateProblemsViewToolWindow)
map <leader>vr <Action>(ActivateRunningDevicesToolWindow)
map <leader>vs <Action>(ActivateStructureToolWindow)
map <leader>vt <Action>(ActivateTerminalToolWindow)
"map <leader> <Action>(ActivatePullRequestsToolWindow)
map <leader>vz <Action>(ToggleZenMode)
let g:WhichKeyDesc_leader_view = "<leader>v +View"
let g:WhichKeyDesc_view_build = "<leader>vb BUILD view"
let g:WhichKeyDesc_view_commit = "<leader>vc COMMIT view"
let g:WhichKeyDesc_view_debug = "<leader>vd DEBUG view"
let g:WhichKeyDesc_view_explorer = "<leader>ve device EXPLORER view"
let g:WhichKeyDesc_view_git = "<leader>vg GIT view"
let g:WhichKeyDesc_view_logcat = "<leader>vl LOGCAT view"
let g:WhichKeyDesc_view_marks = "<leader>vm BOOKMARKS (marks) view"
let g:WhichKeyDesc_view_problems = "<leader>vp PROBLEMS view"
let g:WhichKeyDesc_view_running_devices = "<leader>vr running devcies view"
let g:WhichKeyDesc_view_structure = "<leader>vs STRUCTURE view"
let g:WhichKeyDesc_view_terminal = "<leader>vt TERMINAL view"
let g:WhichKeyDesc_view_todo = "<leader>vo TODO view"
let g:WhichKeyDesc_view_zen = "<leader>vz toggle Zen mode"

" Code Lsp (c)
map <leader>ca <Action>(ShowIntentionActions)
map <leader>cd <Action>(ActivateProblemsViewToolWindow)
map <leader>cf <Action>(ReformatCode)
map <leader>cg <Action>(Generate)
map <leader>cd <Action>(ShowErrorDescription)
map <leader>cr <Action>(RenameElement)
map <leader>cu <Action>(FindUsages)
map <leader>co <Action>(OptimizeImports)
map <leader>cR <Action>(Refactorings.QuickListPopupAction)
map ]d <Action>(GotoNextError)
map [d <Action>(GotoPreviousError)
map gl <Action>(ShowErrorDescription)
map gr <Action>(FindUsages)
let g:WhichKeyDesc_leader_lsp = "<leader>c +code"
let g:WhichKeyDesc_lsp_action = "<leader>ca code action"
let g:WhichKeyDesc_lsp_diagnostic = "<leader>cd problems file (diagnostics)"
let g:WhichKeyDesc_lsp_format = "<leader>cf format"
let g:WhichKeyDesc_lsp_generate = "<leader>cg generate options"
let g:WhichKeyDesc_lsp_rename = "<leader>cr rename"
let g:WhichKeyDesc_lsp_usage = "<leader>cu usage"
let g:WhichKeyDesc_lsp_imports = "<leader>co optimize imports"
let g:WhichKeyDesc_lsp_quicklist = "<leader>cR Refactoring options"
let g:WhichKeyDesc_lsp_error = "gl show error description"
let g:WhichKeyDesc_lsp_references = "gr show references"

" Marks (m)
map <leader>mt <Action>(ToggleBookmark)
map <leader>mm <Action>(ToggleBookmarkWithMnemonic)
map <leader>me <Action>(EditBookmark)
map <leader>ml <Action>(ShowTypeBookmarks)
map <leader>mp <Action>(ShowBookmarks)
map gm <Action>(ShowTypeBookmarks)
map g1 <Action>(GotoBookmark1)
map g2 <Action>(GotoBookmark2)
map g3 <Action>(GotoBookmark3)
map g4 <Action>(GotoBookmark4)
map g5 <Action>(GotoBookmark5)
let g:WhichKeyDesc_leader_marks = "<leader>m +Marks (Bookmarks)"
let g:WhichKeyDesc_marks_toggle = "<leader>mt toggle mark"
let g:WhichKeyDesc_marks_mmnemonic = "<leader>mm toggle Mnemonic mark"
let g:WhichKeyDesc_marks_edit = "<leader>me edit name"
let g:WhichKeyDesc_marks_list = "<leader>ml mnemonic list"
let g:WhichKeyDesc_marks_preview = "<leader>mp preview all marks"
let g:WhichKeyDesc_marks_show = "gm go to mnemonic marks (show marks)"
let g:WhichKeyDesc_marks_goto1 = "g1 go to mark 1"
let g:WhichKeyDesc_marks_goto2 = "g2 go to mark 2"
let g:WhichKeyDesc_marks_goto3 = "g3 go to mark 3"
let g:WhichKeyDesc_marks_goto4 = "g4 go to mark 4"
let g:WhichKeyDesc_marks_goto5 = "g5 go to mark 5"

" Git (g)
map <leader>gn <Action>(Git.CreateNewBranch)
map <leader>ga <Action>(Git.Branches)
map <leader>gb <Action>(GitToolBox.SwitchRecentBranches)
map <leader>gd <Action>(Compare.LastVersion)
map <leader>gr <Action>(Vcs.RollbackChangedLines)
"map <leader>gc <Action>(ActivateCommitToolWindow)
map <leader>gc <Action>(CheckinProject)
map <leader>gl <Action>(Annotate)
map <leader>gp <Action>(Vcs.UpdateProject)
map <leader>gm <Action>(Vcs.UpdateProject)
map <leader>gL <Action>(ActivateVersionControlToolWindow)
map [h <Action>(VcsShowPrevChangeMarker)
map ]h <Action>(VcsShowNextChangeMarker)
let g:WhichKeyDesc_leader_git = "<leader>g +Git"
let g:WhichKeyDesc_git_new = "<leader>gn new branch"
let g:WhichKeyDesc_git_action = "<leader>ga action panel"
let g:WhichKeyDesc_git_branch = "<leader>gb switch branch"
let g:WhichKeyDesc_git_diff = "<leader>gd diff"
let g:WhichKeyDesc_git_rollback = "<leader>gr rollback"
let g:WhichKeyDesc_git_commit = "<leader>gc commit"
let g:WhichKeyDesc_git_blame = "<leader>gl blame"
let g:WhichKeyDesc_git_update = "<leader>gp pull (update project)"
let g:WhichKeyDesc_git_log = "<leader>gL open logs"

" Find more examples here: https://jb.gg/share-ideavimrc
" find actions in  :actionlist
" track actions by turning on 'IdeaVim: track action Ids' in settings
